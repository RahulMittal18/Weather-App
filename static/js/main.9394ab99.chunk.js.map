{"version":3,"sources":["App.jsx","index.js"],"names":["App","useState","place","setPlace","placeData","setPlaceData","clicked","setClicked","isDarkMode","setIsDarkMode","useEffect","fetch","then","res","json","data","console","log","className","type","placeholder","onChange","e","target","value","onClick","class","style","fontSize","location","src","current","condition","icon","alt","temp_c","text","name","forecast","forecastday","day","maxtemp_c","mintemp_c","uv","astro","sunrise","sunset","wind_kph","humidity","precip_mm","padding","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9394ab99.chunk.js","sourcesContent":["import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n// import HourlyData from \"./components/HourlyData.jsx\";\n\nfunction App() {\n  const [place, setPlace] = useState(\"Charkhi Dadri\");\n  const [placeData, setPlaceData] = useState({});\n  const [clicked, setClicked] = useState(false);\n  // const [hourly, setHourly] = useState([]);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  // const hours = [];\n\n  useEffect(() => {\n    fetch(\n      `https://api.weatherapi.com/v1/forecast.json?key=f3bfc4c75db2479896d172441210608&q=${place}&days=2`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        setPlaceData(data);\n      });\n  }, []);\n\n  const updatePlaceData = () => {\n    setClicked(!clicked);\n\n    fetch(\n      `https://api.weatherapi.com/v1/forecast.json?key=f3bfc4c75db2479896d172441210608&q=${place}&days=2`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        setPlaceData(data);\n      });\n\n    // var current = parseInt(\n    //   (placeData.location.localtime_epoch -\n    //     placeData.forecast.forecastday[0].hour[0].time_epoch) /\n    //     3600\n    // );\n\n    // while (current < 24 && hours.length < 5) {\n    //   hours.push(current);\n    //   current += 1;\n    // }\n\n    // setHourly(hours);\n  };\n\n  return (\n    <div className={isDarkMode ? \"App dark\" : \"App light\"}>\n      <div className=\"container\">\n        <div className={isDarkMode ? \"row dark\" : \"row\"}>\n          <div\n            className={\n              isDarkMode\n                ? \"offset-md-3 offset-lg-3 col-12 col-md-6 col-lg-6 navbar dark p-0\"\n                : \"offset-md-3 offset-lg-3 col-12 col-md-6 col-lg-6 navbar p-0\"\n            }\n          >\n            {clicked ? (\n              <div className=\"col-12 form\">\n                <input\n                  type=\"text\"\n                  // value={place}\n                  placeholder=\"Enter City\"\n                  onChange={(e) => {\n                    setPlace(e.target.value);\n                  }}\n                />\n                <button className={isDarkMode? \"btn dark btn-primary\": \"btn light btn-primary\"} onClick={updatePlaceData}>\n                  Search\n                </button>\n              </div>\n            ) : (\n              <div className={isDarkMode ? \"header dark\" : \"header\"}>\n                <div className=\"heading\">\n                  <h2>Weather</h2>\n                </div>\n\n                <div className=\"btns-div\">\n                  <div className=\"mode\">\n                    {isDarkMode ? (\n                      <button\n                        type=\"button\"\n                        class=\"btn btn-light\"\n                        onClick={(e) => {\n                          setIsDarkMode(!isDarkMode);\n                        }}\n                      >\n                        Light\n                      </button>\n                    ) : (\n                      <button\n                        type=\"button\"\n                        class=\"btn btn-dark\"\n                        onClick={(e) => {\n                          setIsDarkMode(!isDarkMode);\n                        }}\n                      >\n                        Dark\n                      </button>\n                    )}\n                  </div>\n                  <div className={isDarkMode? \"search dark\" : \"search\"}>\n                    <button\n                      onClick={(e) => {\n                        setClicked(!clicked);\n                      }}\n                    >\n                      <SearchIcon style={{ fontSize: 35 }} />\n                    </button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n          <div className=\"offset-md-3 offset-lg-3 col-12 col-md-6 col-lg-6 weather p-0\">\n            <div className={isDarkMode ? \"card dark\" : \"card light\"}>\n              {placeData.location ? (\n                <div>\n                  <img src={placeData.current.condition.icon} alt=\"\" />\n                  <div className=\"temp\">{placeData.current.temp_c}°</div>\n                  <div className=\"desc\">{placeData.current.condition.text}</div>\n                  <div className=\"place\">{placeData.location.name}</div>\n                  <div className=\"container data\">\n                    <div\n                      className={\n                        isDarkMode ? \"row whp dark whp-1\" : \"row whp whp-1\"\n                      }\n                    >\n                      <div className=\"col\">\n                        <div className=\"title\">Temp(Max/Min)</div>\n                        <div className=\"data\">\n                          {placeData.forecast.forecastday[0].day.maxtemp_c}°\n                          <span className=\"unit\">C</span>\n                        </div>\n                        <div className=\"data\">\n                          {placeData.forecast.forecastday[0].day.mintemp_c}°\n                          <span className=\"unit\">C</span>\n                        </div>\n                      </div>\n                      <div className=\"col\">\n                        <div className=\"title uv\">UV Index</div>\n                        <div className=\"data\">\n                          {placeData.current.uv}\n                          <span className=\"unit\"></span>\n                        </div>\n                      </div>\n                      <div className=\"col\">\n                        <div className=\"title\">Sunrise/Sunset</div>\n                        <div className=\"data\">\n                          {placeData.forecast.forecastday[0].astro.sunrise}\n                          <span className=\"unit\"></span>\n                        </div>\n                        <div className=\"data\">\n                          {placeData.forecast.forecastday[0].astro.sunset}\n                          <span className=\"unit\"></span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"container data\">\n                    <div\n                      className={\n                        isDarkMode ? \"row whp dark whp-2\" : \"row whp whp-2\"\n                      }\n                    >\n                      <div className=\"col\">\n                        <div className=\"title\">Wind Flow</div>\n                        <div className=\"data\">\n                          {placeData.current.wind_kph}\n                          <span className=\"unit\">km/h</span>\n                        </div>\n                      </div>\n                      <div className=\"col\">\n                        <div className=\"title\">Humidity</div>\n                        <div className=\"data\">\n                          {placeData.current.humidity}\n                          <span className=\"unit\">%</span>\n                        </div>\n                      </div>\n                      <div className=\"col\">\n                        <div className=\"title\">Precipitation</div>\n                        <div className=\"data\">\n                          {placeData.current.precip_mm}\n                          <span className=\"unit\">mm</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* <div className=\"container\">\n                    <div className=\"row whp\">\n                      <div className=\"col\">\n                        <div className=\"hour\">\n                          {hourly.map((item, index) => (\n                            <HourlyData\n                              key={index}\n                              item={item}\n                              hours={hours}\n                              placeData={placeData}\n                            />\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div> */}\n                </div>\n              ) : (\n                <h2 style={{ padding: 10 }}>Place Not Found</h2>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}